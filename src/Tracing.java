import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.util.Date;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class Tracing {
	private static final String logPath = "apps/myapp.war/TraceOut";
	private static volatile PrintStream traceOut = null;
	private static final ConcurrentHashMap<Long, Long> threadIds = new ConcurrentHashMap<Long, Long>(); 
	private static final AtomicLong nextThreadId = new AtomicLong(0);
	private static final ConcurrentHashMap<String, Long> classIds = new ConcurrentHashMap<String, Long>(); 
	private static final AtomicLong nextClassId = new AtomicLong(0);
	
	private static final int NUM_THREADS = 50;
	
	public synchronized static void start(){
		if(traceOut != null){
			traceOut.close();
		}
		
		try {
			traceOut = new PrintStream(new File(logPath));
			traceOut.println("% Generated by CloudGC @" + new Timestamp((new Date()).getTime()));
			traceOut.println("% 64-bit");
			traceOut.println(Settings.getAllCommented());
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public synchronized static void stop() {
		if(traceOut != null){
			traceOut.close();
			traceOut = null;
		}
	}
	
	public synchronized static void logChanges(){
		if(traceOut !=null)
			traceOut.println(Settings.getAllCommented());
	}
	
	public static void alloc(GraphNode obj, boolean isGlobal){
		if(traceOut !=null){
			String msg = "a T"+getThreadId()+" O"+obj.getId()+" S"+obj.getSize()+" N"+obj.getSlots()+" C" + getClassId(obj) +"\n";
			msg += createAdd(obj, isGlobal);
			traceOut.print(msg);
		}
	}
	
	private static String createAdd(GraphNode obj, boolean isGlobal){
		String msg = "";
		if(!isGlobal){
			msg += "+ T"+getThreadId()+" O"+obj.getId() +"\n";
		} else {
			msg += "+ T"+getThreadId()+" O"+obj.getId() + "\n";
			for(int i = 0; i < NUM_THREADS; i++){
				if(i != getThreadId()){
					msg += "+ T"+i+" O"+obj.getId() + "\n";
				}
			}
		}

		return msg;
	}

	public static void add(GraphNode obj, boolean isGlobal){
		if(traceOut != null){
			traceOut.print(createAdd(obj, isGlobal));
		}
	}
	
	public static void store(GraphNode obj, int i){
		if(traceOut !=null)
			traceOut.println("s T"+getThreadId()+" O"+obj.getId()+" F"+(i+obj.getPayloadOffset())+" S1 V0");
	}
	
	public static void write(GraphNode par, int i, GraphNode obj){
		if(traceOut !=null){
			long objId = 0;
			if(obj != null){
				objId = obj.getId();
			}
			traceOut.println("w T"+getThreadId()+" P"+par.getId()+" #"+i+" O"+objId+" S8 V0");
		}
	}
	
	public static void readPrim(GraphNode obj, int i){
		if(traceOut !=null)
			traceOut.println("r T"+getThreadId()+" O"+obj.getId()+" F"+(i+obj.getPayloadOffset())+" S1 V0");
	}
	
	public static void read(GraphNode obj, int i){
		if(traceOut !=null)
			traceOut.println("r T"+getThreadId()+" O"+obj.getId()+" I"+i+" S8 V0");
	}
	
	private static String createDel(GraphNode obj, boolean isGlobal){
		String msg = "";
		if(!isGlobal){
			msg += "- T"+getThreadId()+" O"+obj.getId() +"\n";
		} else {
			msg += "- T"+getThreadId()+" O"+obj.getId() + "\n";
			for(int i = 0; i < NUM_THREADS; i++){
				if(i != getThreadId()){
					msg += "- T"+i+" O"+obj.getId() + "\n";
				}
			}
		}

		return msg;
	}
	
	public static void del(GraphNode obj, boolean isGlobal){
		if(traceOut != null){
			traceOut.print(createDel(obj, isGlobal));
		}
	}
	
	private static long getThreadId(){
		long internalId = Thread.currentThread().getId();
		if(!threadIds.containsKey(internalId)){
			threadIds.put(internalId, nextThreadId.getAndIncrement());
		}
		return threadIds.get(internalId);
	}
	
	private static long getClassId(GraphNode obj) {
		String id = obj.getPayloadLength()/8 +"_" + obj.getSlots();
		id = id.intern();
		if(!classIds.containsKey(id)){
			classIds.put(id, nextClassId.getAndIncrement());
		}
		return classIds.get(id);
	}
}
